import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
from datetime import time, datetime, timedelta
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ª–µ–≥–∫–æ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥ —Å–µ–±—è)
WAKE_UP_TIME, BEDTIME, DAY_REVIEW = range(3)
user_schedules = {}
user_data_store = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å

# –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
DEFAULT_SCHEDULE = {
    "6:30 - 6:40": "–ü–æ–¥—ä–µ–º –∏ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
    "6:40 - 7:30": "–í–µ–ª–æ–ø–æ–µ–∑–¥–∫–∞",
    "7:30 - 8:05": "–î—É—à, –∑–∞–≤—Ç—Ä–∞–∫, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
    "8:05 - 15:05": "–†–∞–±–æ—á–∏–π –±–ª–æ–∫ (7 —á–∞—Å–æ–≤)",
    "15:05 - 15:30": "–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è, –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
    "15:30 - 16:15": "–û—Ç–¥—ã—Ö, –¥—É—à, –ø–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ",
    "16:15 - 17:30": "–í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π / –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –µ–¥—ã",
    "17:30 - 19:00": "–°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω",
    "19:00 - 22:00": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–µ–º—å–µ–π",
    "22:00 - 22:30": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é",
    "22:30 - 23:00": "–ß—Ç–µ–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ",
}

# –ë–∞–∑–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
MOTIVATIONAL_QUOTES = [
    "–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –¢—ã —É–∂–µ –µ–≥–æ –ø—Ä–∏–Ω—è–ª(–∞)! üöÄ",
    "–¢—ã –Ω–µ procrastinator, —Ç—ã doer! –ü—Ä–æ—Å—Ç–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. üòâ",
    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ. –ü–æ—Ç–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º. –ò —Ç–∞–∫ —Ç—ã —Å–≤–µ—Ä–Ω–µ—à—å –≥–æ—Ä—ã. ‚õ∞Ô∏è",
    "–î–∞–∂–µ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞. –¢—ã –µ–≥–æ —É–∂–µ —Å–¥–µ–ª–∞–ª(–∞)! üë£",
    "–¢—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å —Å–≤–æ–∏–º –¥–Ω–µ–º, –∞ –Ω–µ –¥–µ–Ω—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–±–æ–π. üí™",
    "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å. –°–µ–≥–æ–¥–Ω—è ‚Äî –æ—á–µ—Ä–µ–¥–Ω–æ–π –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Ç–≤–æ–µ–º —É—Å–ø–µ—Ö–µ. üß±",
]

GOOD_NIGHT_QUOTES = [
    "–°–æ–Ω ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π. –í—ã—Å–ø–∏—Å—å —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ! üò¥",
    "–ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤! üåô",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–æ –ø–æ—Ç—Ä—É–¥–∏–ª—Å—è(–∞—Å—å). –ó–∞—Å–ª—É–∂–∏–ª(–∞) –æ—Ç–¥—ã—Ö. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! üí´",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ –¥–Ω—è."""
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_schedules[user_id] = DEFAULT_SCHEDULE.copy()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
    schedule_text = "üìÖ <b>–¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
    for time_slot, task in user_schedules[user_id].items():
        schedule_text += f"<b>{time_slot}</b>: {task}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
    motivation = random.choice(MOTIVATIONAL_QUOTES)
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {update.effective_user.first_name}! ‚òÄÔ∏è\n\n"
        f"{motivation}\n\n"
        f"{schedule_text}\n"
        "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–µ—á—å —Å–ø–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00 –∏–ª–∏ 23:30)",
        parse_mode='HTML'
    )
    
    return BEDTIME

async def set_bedtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É."""
    user_id = update.effective_user.id
    bedtime_text = update.message.text
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    try:
        if len(bedtime_text) == 5 and bedtime_text[2] == ':':
            hours = int(bedtime_text[:2])
            minutes = int(bedtime_text[3:])
            if 0 <= hours <= 23 and 0 <= minutes <= 59:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–Ω–∞
                if user_id not in user_data_store:
                    user_data_store[user_id] = {}
                user_data_store[user_id]['bedtime'] = bedtime_text
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 7.5 —á–∞—Å–æ–≤ —Å–Ω–∞)
                bedtime = datetime.strptime(bedtime_text, "%H:%M")
                wakeup_time = (bedtime + timedelta(hours=7, minutes=30)).strftime("%H:%M")
                
                await update.message.reply_text(
                    f"‚è∞ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –æ—Ç–±–æ–π –Ω–∞ {bedtime_text}. "
                    f"–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {wakeup_time}\n\n"
                    "–ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /done –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è! "
                    "–ê –≤–µ—á–µ—Ä–æ–º –Ω–∞–ø–∏—à–∏ /finish –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
    except ValueError:
        pass
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00 –∏–ª–∏ 08:30)"
    )
    return BEDTIME

async def finish_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /finish - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è."""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—à—å –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üëç\n\n"
        "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å? –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
        "‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ?\n"
        "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ!"
    )
    
    return DAY_REVIEW

async def save_day_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è."""
    user_id = update.effective_user.id
    day_review = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if user_id not in user_data_store:
        user_data_store[user_id] = {}
    user_data_store[user_id]['last_review'] = day_review
    user_data_store[user_id]['review_date'] = datetime.now().strftime("%Y-%m-%d")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    good_night = random.choice(GOOD_NIGHT_QUOTES)
    bedtime = user_data_store[user_id].get('bedtime', '23:00')
    
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç! –¢—ã –±–æ–ª—å—à–æ–π(–∞—è) –º–æ–ª–æ–¥–µ—Ü! üôå\n\n"
        f"{good_night}\n\n"
        f"–¢–≤–æ–π –æ—Ç–±–æ–π –≤ {bedtime}. –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤! üò¥",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /today - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user_id = update.effective_user.id
    schedule = user_schedules.get(user_id, DEFAULT_SCHEDULE)
    
    text = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for time_slot, task in schedule.items():
        text += f"<b>{time_slot}</b>: {task}\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /done - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    motivation = random.choice(MOTIVATIONAL_QUOTES)
    await update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™\n\n"
        f"{motivation}\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
        "/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/next - –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        '–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å –∑–∞–Ω–æ–≤–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"Update {update} caused error {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    APPLICATION = ApplicationBuilder().token("7621410997:AAHwLB41A3FserXty1ashJ1zKfGnLy4I3K4").build()
    
    # –î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è
    start_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            BEDTIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_bedtime)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
    finish_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('finish', finish_day)],
        states={
            DAY_REVIEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_day_review)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    APPLICATION.add_handler(start_conv_handler)
    APPLICATION.add_handler(finish_conv_handler)
    APPLICATION.add_handler(CommandHandler("today", show_today))
    APPLICATION.add_handler(CommandHandler("done", task_done))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    APPLICATION.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    main()
